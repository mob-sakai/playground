name: "TransferAll"

on:
  workflow_dispatch:
    inputs:
      version:
        description: "target tag (-1.3.0)"
        default: -1.3.0

env:
  unityImageTo: ghcr.io/mob-sakai/unity3d
  unityImageFrom: docker.io/mobsakai/unity3d
  minUnityVersion: 2019.4
  maxDispatch: 100

jobs:
  trans-all:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      actions: write
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        module:
          - -base
          - -linux-il2cpp
          - -windows-mono
          - -mac-mono
          - -ios
          - -android
          - -webgl
    steps:
      ###########################
      #          Setup          #
      ###########################
      - name: "⚙️ Setup"
        id: setup
        run: |
          # If all the combination tags to be built are existed in the registry -> steps.setup.outputs.skip=true

          echo "======== Exist tags in ghcr.io ========"
          skopeo list-tags docker://${{ env.unityImageTo }}   | jq -r '.Tags[]' | grep -v '^ubuntu' | grep -e "${{ matrix.module }}${{ inputs.version }}$" | tee .existTagsTo   || touch .existTagsTo

          echo "======== Exist tags in docker.io ========"
          skopeo list-tags docker://${{ env.unityImageFrom }} | jq -r '.Tags[]' | grep -v '^ubuntu' | grep -e "${{ matrix.module }}${{ inputs.version }}$" | tee .existTagsFrom || touch .existTagsFrom

          echo "======== Available Unity versions ========"
          npx unity-changeset list --versions --min ${{ env.minUnityVersion }} --all | tee .unityVersions

          echo "======== Unity versions to build ========"
          UNITY_VERSIONS_TO_BUILD=`for unityVersion in $(cat .unityVersions) ; do \
              [ -z "$(grep -x ${unityVersion}${{ matrix.module }}${{ inputs.version }} .existTagsTo)" ] \
              && [ -n "$(grep -x ${unityVersion}${{ matrix.module }}${{ inputs.version }} .existTagsFrom)" ] \
              && echo "${unityVersion}" || : ; \
          done`

          if [ -z "${UNITY_VERSIONS_TO_BUILD}" ]; then
            echo "::warning::No versions to build."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

          echo "======== Output ========"
          UNITY_VERSIONS_JSON=`echo "${UNITY_VERSIONS_TO_BUILD}" | head -n ${{ env.maxDispatch }} | jq -R '.' | jq -s -c '.' | jq -R '.' || echo '[]'`
          echo "unityVersions=${UNITY_VERSIONS_JSON}" | tee -a $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY

      ###########################
      #  Dispatch Trans  #
      ###########################
      - name: "🚀 Dispatch 'Trans'"
        # If there is no version to be built, the build will be skipped.
        if: steps.setup.outputs.skip != 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Transfer"
          token: ${{ github.token }}
          inputs: '{ "unityVersions": ${{ steps.setup.outputs.unityVersions }}, "module": "${{ matrix.module }}", "version": "${{ inputs.version }}" }'
          ref: ${{ github.ref }}
