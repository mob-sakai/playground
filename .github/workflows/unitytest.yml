name: Reusable workflow example

on:
  workflow_call:
    inputs:
      minimum-version:
        required: false
        default: '2018.4'
        type: string
      versions:
        required: false
        type: string
      beta:
        required: false
        default: false
        type: boolean
    secrets:
      licence:
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.setup.outputs.unity-versions }}
    steps:
      - id: setup
        run: |
          if [ ${{ inputs.beta }} ]; then
            VERSIONS=`npx unity-changeset list --versions --latest-patch --min ${{ inputs.minimum-version }} --json --all`
          else
            VERSIONS=`npx unity-changeset list --versions --latest-patch --min ${{ inputs.minimum-version }} --json`
          fi
          
          if [ -n "${{ inputs.versions }}" ]; then
            ADD_VERSIONS=`echo $versions | jq -R | jq -sc`
            VERSIONS=`echo "[$VERSIONS, $ADD_VERSIONS]" | jq -c 'flatten|sort|unique'`
          fi
          echo "==== Target Unity Versions ===="
          echo "${VERSIONS}"
          echo "unity-versions=${VERSIONS}" >> $GITHUB_OUTPUT
          
  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
    steps:
      # Checkout sandbox project
      - run: |
          echo ${{ matrix.version }}
          echo ${{ secret.licence }}
