# Required repository secrets
#   UNITY_LICENSE: The contents of Unity License File (*.ulf)
name: test

env:
  # BETA: Included beta versions of Unity.
  BETA: false

  # MINIMUM_VERSION: The minimum version of Unity.
  MINIMUM_VERSION: 2022.2

  # MODULES: Included specific modules of Unity. base|windows-mono|mac-mono|linux-il2cpp|webgl|android|ios
  MODULES: |
    base

  # ADDITIONAL_VERSIONS: Included specific versions of Unity.
  # ADDITIONAL_VERSIONS: |
  #   2020.3.10f

on:
  push:
    branches:
      - main
      - develop
    tags:
      - "!*"
  pull_request:
    types:
      - opened
      - synchronize
  schedule:
    - cron: "0 0 * * 0" # weekly
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.setup.outputs.versions }}
      modules: ${{ steps.setup.outputs.modules }}
    steps:
      - id: setup
        run: |
          echo "==== Target Unity Versions ===="
          ${BETA} && OPT="--all"
          VERSIONS=`npx unity-changeset list --versions --latest-patch --min ${MINIMUM_VERSION} --json ${OPT}`
          ADDITIONAL_VERSIONS=`echo "${ADDITIONAL_VERSIONS}" | jq -R | jq -sc`
          VERSIONS=`echo "[$VERSIONS, $ADDITIONAL_VERSIONS]" | jq -c 'flatten|map(select(length > 0))|sort|unique'`
          echo "${VERSIONS}"
          echo "versions=${VERSIONS}" >> $GITHUB_OUTPUT

          echo "==== Target Unity Modules ===="
          MODULES=`echo "${MODULES}" | jq -R | jq -sc 'map(select(length > 0))'`
          echo "${MODULES}"
          echo "modules=${MODULES}" >> $GITHUB_OUTPUT


  # echo "### Commit Summary" >> $GITHUB_STEP_SUMMARY
  # echo "- ${{ github.event.head_commit.url }}" >> $GITHUB_STEP_SUMMARY
  # echo "- ${{ github.event.head_commit.message }}" >> $GITHUB_STEP_SUMMARY
  # echo "" >> $GITHUB_STEP_SUMMARY
  # echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
  # echo "- Versions: ${VERSIONS}" >> $GITHUB_STEP_SUMMARY
  # echo "- Modules: ${MODULES}" >> $GITHUB_STEP_SUMMARY

  # unity-activate:
  #   if: ${{ failure() }}
  #   runs-on: ubuntu-latest
  #   needs: setup
  #   steps:
  #     # Request manual activation file
  #     - uses: game-ci/unity-request-activation-file@v2
  #       id: alf
  #     # Upload artifact (Unity_v20XX.X.XXXX.alf)
  #     - uses: actions/upload-artifact@v3
  #       with:
  #         path: ${{ steps.alf.outputs.filePath }}
  #     - run: |
  #         echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
  #         echo "1. Download artifact file (*.alf)" >> $GITHUB_STEP_SUMMARY
  #         echo "1. Activate *.alf and get *.ulf" >> $GITHUB_STEP_SUMMARY
  #         echo "1. Add the contents of the ulf file as a repository secret `UNITY_LICENSE`" >> $GITHUB_STEP_SUMMARY
  #         echo "1. Re-run the test workflow" >> $GITHUB_STEP_SUMMARY

  test:
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
        module: ${{ fromJson(needs.setup.outputs.modules) }}

    steps:
      # Checkout project
      - uses: actions/checkout@v3

      # # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.version }}-${{ matrix.module }}-${{ github.sha }}
          restore-keys: |
            Library-${{ matrix.version }}-${{ matrix.module }}

      # Build tests
      - uses: game-ci/unity-builder@v2
        with:
          customImage: mobsakai/unity3d:${{ matrix.version }}-${{ matrix.module }}
          customParameters: -nographics -BuildScriptsOnly
          targetPlatform: StandaloneLinux64
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

      - if: failure()
        run: |
          ls -al

      # Run tests
      - name: "Run tests"
        uses: game-ci/unity-test-runner@v2
        with:
          customImage: mobsakai/unity3d:${{ matrix.version }}-${{ matrix.module }}
          customParameters: -nographics
          # checkName: ${{ matrix.version }}-${{ matrix.module }} Test Results
          # githubToken: ${{ github.token }}
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        
      - if: failure()
        run: |
          ls artifacts
          echo "### Compile Errors" >> $GITHUB_STEP_SUMMARY
          cat artifacts/COMBINE_RESULTS.log | grep 'error CS' >> $GITHUB_STEP_SUMMARY

      # Upload artifact (Unity_v20XX.X.XXXX.alf)
      - uses: actions/upload-artifact@v3
        if: failure()
        with:
          path: artifacts