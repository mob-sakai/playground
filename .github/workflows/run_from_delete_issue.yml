name: run_from_delete_issue

on:
  workflow_dispatch:
    inputs:
      versions:
        description: "Unity versions array to build"
        required: true
        default: '[ \"2018.4.30f1\" ]'
      modules:
        description: "Unity modules array to build.\n(base|linux-il2cpp|windows-mono|mac-mono|ios|android|webgl)"
        required: true
        default: '[ \"base\", \"linux-il2cpp\", \"windows-mono\", \"mac-mono\", \"ios\", \"android\", \"webgl\" ]'
  issues:
    types: [opened, edited, deleted]

jobs:
  setup:
    if: github.event_name != 'issues' || github.event.issue.body == '/build-editor'
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.setup.outputs.versions }}
      modules: ${{ steps.setup.outputs.modules }}
    steps:
      - id: setup
        run: |
          if [ "${{ github.event_name }}" = "issues" ]; then
            echo 'versions=[ "${{ github.event.issue.title }}" ]' | tee $GITHUB_OUTPUT
            echo 'modules=[ "base", "linux-il2cpp", "windows-mono", "mac-mono", "ios", "android", "webgl" ]' | tee $GITHUB_OUTPUT
          else
            echo "versions=${{ github.event.inputs.versions }}" | tee $GITHUB_OUTPUT
            echo "modules=${{ github.event.inputs.modules }}" | tee $GITHUB_OUTPUT
          fi

  check:
    needs: setup
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
      version: ${{ matrix.version }}
      module: ${{ matrix.module }}
    strategy:
      matrix:
        version: ${{ fromJson(needs.setup.outputs.versions) }}
        module: ${{ fromJson(needs.setup.outputs.modules) }}
    steps:

      - uses: actions/checkout@v3

      - run: cat .env | sed 's/=\" *$/<<EOD/g' | sed 's/^\"/EOD/g' | grep '^[^# ]' | tee $GITHUB_ENV

      - id: check
        run: |
          echo -n "${{ env.EXCLUDE_IMAGE_TAGS }}" | grep '.' | .excludedTags
          if [ -n "$(echo ${{ matrix.version }}-${{ matrix.module }} | grep -f .excludedTags)" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - if: env.skip != 'true'
        run: |
          echo "Building ${{ matrix.version }} for ${{ matrix.module }}"

  build:
    if: ${{ !needs.check.outputs.skip }}
    needs: check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: 
          - ${{ fromJson(needs.check.outputs.version) }}
        module:
          - ${{ fromJson(needs.check.outputs.module) }}
    steps:

      - run: |
          echo "Building ${{ matrix.version }} for ${{ matrix.module }}"
